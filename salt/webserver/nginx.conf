upstream dancerfly {
    server localhost:8000 fail_timeout=0;
}

server {

    listen       80 default;
    server_name  {{ pillar['deploy']['server_name'] }};
    return 302 https://$host$request_uri;
}

server {

    listen       443;
    server_name  {{ pillar['deploy']['server_name'] }};

    client_max_body_size  4G;
    keepalive_timeout     70;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam {{ pillar['files']['crt_dir'] }}dhparam.pem;

    access_log  {{ pillar['files']['logs']['nginx_access'] }};
    error_log   {{ pillar['files']['logs']['nginx_error'] }};

    ssl                  on;
    ssl_certificate      {{ pillar['files']['crt_dir'] }}dancerfly.crt;
    ssl_certificate_key  {{ pillar['files']['crt_dir'] }}dancerfly.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_protocols        TLSv1 TLSv1.1 TLSv1.2;
    add_header Strict-Transport-Security 'max-age=31536000; includeSubdomains; preload';
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;

    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate {{ pillar['files']['crt_dir'] }}gandi_plus_intermediates.crt;
    resolver 8.8.8.8 valid=360s ipv6=off; # Google DNS

    root {{ pillar['files']['maintenance_dir'] }};

    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    location /static/ {
        autoindex off;
        alias {{ pillar['files']['static_dir'] }};
        expires 1M;
        gzip_static on;
        add_header Cache-Control public;
    }

    location /media/ {
        autoindex off;
        alias {{ pillar['files']['media_dir'] }};
        expires 1M;
        gzip_static on;
        add_header Cache-Control public;
    }

    # If a maintenance file exists, return that. Otherwise,
    # drop to the proxy (gunicorn).
    location / {
        try_files {{ pillar['files']['maintenance_dir'] }}index.html @proxy;
    }

    location @proxy {
        proxy_set_header  Host                 $host;
        proxy_set_header  X-Real-IP            $remote_addr;
        proxy_set_header  REMOTE_HOST          $remote_addr;
        proxy_set_header  X-Forwarded-For      $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto    $scheme;

        proxy_pass http://dancerfly;
    }
}

